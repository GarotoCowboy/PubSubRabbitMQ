# Porta da aplicação
server.port=8080

spring.application.name=RabbitMqProject

# Tira a necessidade de precisar de um banco de dados enquanto não for utilizado
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

# Configuração do RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# --- Spring Cloud Stream Bindings ---

# 1. PedidoController -> fila-processamento-pedidos
spring.cloud.stream.bindings.enviarPedidoParaProcessamento-out-0.destination=fila-processamento-pedidos

# 2. ProcessamentoPedidoService (Consumer) <- fila-processamento-pedidos
spring.cloud.stream.bindings.receberPedidoParaProcessamento-in-0.destination=fila-processamento-pedidos
spring.cloud.stream.bindings.receberPedidoParaProcessamento-in-0.group=grupo-processamento

# 3. ProcessamentoPedidoService (Producer) -> fila-transporte-pedidos
spring.cloud.stream.bindings.enviarPedidoParaTransporte-out-0.destination=fila-transporte-pedidos

# 4. ProcessamentoPedidoService (Producer) -> eventos-pedidos (Exchange) com routing key 'pedido-processado'
spring.cloud.stream.bindings.publicarEventoPedidoProcessado-out-0.destination=eventos-pedidos
spring.cloud.stream.bindings.publicarEventoPedidoProcessado-out-0.producer.routing-key-expression='pedido-processado'
spring.cloud.stream.rabbit.bindings.publicarEventoPedidoProcessado-out-0.producer.exchange-type=topic # Garante que 'eventos-pedidos' seja um TopicExchange

# 5. TransportePedidoService (Consumer) <- fila-transporte-pedidos
spring.cloud.stream.bindings.receberPedidoParaTransporte-in-0.destination=fila-transporte-pedidos
spring.cloud.stream.bindings.receberPedidoParaTransporte-in-0.group=grupo-transporte

# 6. TransportePedidoService (Producer) -> eventos-pedidos (Exchange) com routing key 'pedido-entregue'
spring.cloud.stream.bindings.publicarEventoPedidoEntregue-out-0.destination=eventos-pedidos
spring.cloud.stream.bindings.publicarEventoPedidoEntregue-out-0.producer.routing-key-expression='pedido-entregue'
spring.cloud.stream.rabbit.bindings.publicarEventoPedidoEntregue-out-0.producer.exchange-type=topic # Garante que 'eventos-pedidos' seja um TopicExchange (reforça)

# 7. NotificacaoService (Consumer) <- eventos-pedidos (Exchange)
spring.cloud.stream.bindings.ouvirEventosNotificacao-in-0.destination=eventos-pedidos
spring.cloud.stream.bindings.ouvirEventosNotificacao-in-0.group=grupo-notificacao
spring.cloud.stream.rabbit.bindings.ouvirEventosNotificacao-in-0.consumer.exchange-type=topic
spring.cloud.stream.rabbit.bindings.ouvirEventosNotificacao-in-0.consumer.binding-routing-key=pedido-processado,pedido-entregue

# 8. AuditoriaService (Consumer) <- eventos-pedidos (Exchange)
spring.cloud.stream.bindings.ouvirEventosAuditoria-in-0.destination=eventos-pedidos
spring.cloud.stream.bindings.ouvirEventosAuditoria-in-0.group=grupo-auditoria
spring.cloud.stream.rabbit.bindings.ouvirEventosAuditoria-in-0.consumer.exchange-type=topic
spring.cloud.stream.rabbit.bindings.ouvirEventosAuditoria-in-0.consumer.binding-routing-key=pedido-processado,pedido-entregue

# Configurações padrão do binder (geralmente não precisa mexer se o padrão serve)
# spring.cloud.stream.rabbit.binder.auto-create-dlq=false # true por padrão para consumidores com grupo
# spring.cloud.stream.rabbit.binder.declare-exchange=true # true por padrão
# spring.cloud.stream.rabbit.binder.declare-queue=true # true por padrão